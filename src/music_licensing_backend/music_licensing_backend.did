type Approvepayload = record { cost : nat32; license_id : nat64 };
type Error = variant {
  AlreadyApproved : record { msg : text };
  InvalidPayload : record { msg : text };
  NotFound : record { msg : text };
};
type License = record {
  id : nat64;
  end_date : text;
  start_date : text;
  owner_id : nat64;
  approved : bool;
  licensee_id : nat64;
  song_id : nat64;
  price : nat32;
};
type LicensePayload = record {
  end_date : text;
  start_date : text;
  licensee_id : nat64;
  song_id : nat64;
};
type Licensee = record {
  id : nat64;
  licenses : vec nat64;
  name : text;
  email : text;
};
type LicenseePayload = record { name : text; email : text };
type Owner = record {
  id : nat64;
  song_ids : vec nat64;
  name : text;
  email : text;
  license_ids : vec nat64;
  owner_principal : text;
};
type OwnerPayload = record { name : text; email : text };
type ProtectedPayload = record { license_id : nat64 };
type Result = variant { Ok : License; Err : Error };
type Result_1 = variant { Ok : Licensee; Err : Error };
type Result_2 = variant { Ok : Owner; Err : Error };
type Result_3 = variant { Ok : Song; Err : Error };
type Result_4 = variant { Ok : vec Song; Err : Error };
type Result_5 = variant { Ok : vec License; Err : Error };
type Result_6 = variant { Ok : ReturnOwner; Err : Error };
type ReturnOwner = record {
  id : nat64;
  name : text;
  email : text;
  owner_principal : text;
};
type Song = record {
  id : nat64;
  title : text;
  year : nat32;
  owner_id : nat64;
  genre : text;
  artist : text;
  price : nat32;
};
type SongPayload = record {
  title : text;
  year : nat32;
  owner_id : nat64;
  genre : text;
  artist : text;
  price : nat32;
};
type UpdateSongPayload = record {
  id : nat64;
  title : text;
  year : nat32;
  genre : text;
  artist : text;
  price : nat32;
};
service : {
  approve_license : (Approvepayload) -> (Result);
  create_license_request : (LicensePayload) -> (Result);
  create_licensee : (LicenseePayload) -> (Result_1);
  create_owner : (OwnerPayload) -> (Result_2);
  create_song : (SongPayload) -> (Result_3);
  delete_song : (nat64) -> (Result_3);
  get_all_songs : () -> (Result_4) query;
  get_license : (nat64) -> (Result) query;
  get_licensee : (nat64) -> (Result_1) query;
  get_licensee_licenses : (nat64) -> (Result_5) query;
  get_owner_license_requests : (nat64) -> (Result_5) query;
  get_song : (nat64) -> (Result_3) query;
  get_song_owner : (nat64) -> (Result_6) query;
  revoke_license : (ProtectedPayload) -> (Result);
  update_song : (UpdateSongPayload) -> (Result_3);
}
